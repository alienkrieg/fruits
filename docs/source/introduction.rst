Introduction
============

Installation
------------

For a quick and up-to-date installation, please go to
`the github page for FRUITS <https://github.com/alienkrieg/tsclassification>`_
and clone the repository. Then install the using the ``setuptools`` package by
executing the following command in the cloned folder.

>>> python setup.py install

What is FRUITS?
---------------

**FRUITS** (**F**\ eature Ext\ **R**\ action **U**\ sing **IT**\ erated **S**\ ums) is a
python package that can be used for feature extraction from multidimensional
time series data. These calculated features can then used for a classification
task.

The main class of the package is ``fruits.Fruit``. It functions like a
pipeline that goes trough three steps in order to get the wanted features.
The input of the pipeline should be the time series dataset. The following
three steps will be processed by the pipeline one-after-another.

Data preparation / preprocessing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
DataPreparateur objects are used to preprocess the data.
This is an optional step.

Calculation of Iterated Sums
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SummationIterator objects specify which Iterated Sums should be calculated
For example: ::

	<[11], ISS(X)>=numpy.cumsum([x^2 for x in X])

is the result of::

	fruits.core.ISS(X, [fruits.iterators.SimpleWord("[11]")])

Feature Sieving:
^^^^^^^^^^^^^^^^
FeatureSieve objects have to be specified in order to extract the actual
results of this pipeline from the results of the previous step(s).
The total number of features per time series is: ::

	[number of FeatureSieve objects] * [number of SummationIterator objects]

Simple Example
--------------

The following code block shows a simple example on how to use **FRUITS**.

.. code-block:: python

	# think of a 3 dimensional time series dataset
	X_train, y_train, X_test, y_test = ...

	# create a Fruit object
	myfruit = fruits.Fruit("myfruit - Fruit class example")

	# add a DataPreparateur to it by using predefined ones from fruits.preparateurs
	myfruit.add(fruits.preparateurs.INC(zero_padding=True))

	# generate simple SummationIterator objects (i.e. SimpleWords)
	simple_words = fruits.iterators.generate_words(
	                                dim=3,
	                                monomial_length=2,
	                                n_monomials=1)
	# simple_words is now a list of words in the extended alphabet generated by {1,2,3}:
	# [1], [2], [3], [11], [22], [33], [12], [13], [23]

	# add the iterators to the class instance
	myfruit.add(simple_words)

	# choose from a variety of FeatureFilter objects in fruits.features
	myfruit.add(fruits.features.PPV(quantile=0.5, constant=False))
	myfruit.add(fruits.features.MAX)

	# fit the object to the data
	myfruit.fit(X_train)
	# get features for the training data
	X_train_features = myfruit.transform(X_train)
	# get features for the testing data
	X_test_features = myfruit.transform(X_test)
